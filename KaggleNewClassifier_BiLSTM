import pandas as pd
import io
from google.colab import files
uploaded = files.upload()
df = pd.read_csv(io.BytesIO(uploaded['train.csv']))


X = df.dropna()
X=df.drop('label',axis=1)

y = df['label']

#print(y.value_counts())
# print(X.shape)
# print(y.shape)
import tensorflow  as tf
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras import Sequential
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import one_hot

# Vocabluary  size
voc_size = 5000
# one Hot Representation
messages = X.copy()
messages['title'][1]
messages.reset_index(inplace=True)#bcs nan values 
import nltk
import re
from nltk.corpus import stopwords
nltk.download('stopwords')
#data preprocessing
from  nltk.stem.porter import  PorterStemmer
ps=PorterStemmer()
corpus=[]
for i  in range(0,len(messages)):
    #review=re.sub('[^a-zA-Z]',' ',messages['title'][i])
    review=re.sub('[^a-zA-Z]',' ',messages['title'][i])
    review=review.lower()
    review=review.lower()
    review=review.split()
    review=[ps.stem(word)for word in review if not word in stopwords.words('english')]
    review=' '.join(review)
    corpus.append(review)
onehot_rep=[one_hot(words,voc_size) for words in corpus]
print(onehot_rep)

#Embedding represention
sent_length=20
embedded_docs=pad_sequences(onehot_rep,padding='pre',maxlen=sent_length)
embedded_docs[0]
print(embedded_docs)
#Create the model
embedding_vector_features=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
model.add(Bidirectional(LSTM(100)))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()
len(embedded_docs),y.shape
import numpy as np
X_final=np.array(embedded_docs)
y_final=np.array(y)
print(X_final.shape)
print(y_final.shape)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_final,y_final,test_size=0.33,random_state=42)
model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)
