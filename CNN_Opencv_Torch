import cv2
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as fn

image = cv2.imread('D:/1.jpg')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
# plt.show()
print(image.shape)
print(image[0][0])
# convert RGB image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
cv2.imwrite('D:/2.jpg', gray)
plt.imshow(cv2.cvtColor(gray, cv2.COLOR_BGR2RGB))
# plt.show()

print(gray.shape)
data = np.array(gray)
flattened = data.flatten()
print(flattened.shape)

# 3x3 array for edge detection
mat_y = np.array([[-1, -2, -1],
                  [0, 0, 0],
                  [1, 2, 1]])
mat_x = np.array([[-1, 0, 1],
                  [0, 0, 0],
                  [1, 2, 1]])

filtered_image = cv2.filter2D(gray, -1, mat_y)
plt.imshow(filtered_image, cmap='gray')
filtered_image = cv2.filter2D(gray, -1, mat_x)
plt.imshow(filtered_image, cmap='gray')
# plt.show()
filter_vals = np.array([[-1, -1, 1, 2], [-1, -1, 1, 0], [-1, -1, 1, 1], [-1, -1, 1, 1]])
print('Filter shape:', filter_vals.shape)


class Net(nn.Module):
    # construct  declaration
    def __init__(self, weight):
        super(Net, self).__init__()

        k_height, k_width = weight.shape[1:]
        self.conv = nn.Conv2d(1, 4, kernel_size=(k_height, k_width), bias=False)
        self.conv.weight = torch.nn.Parameter(weight)

    def forward(self, x):
        # Calculates the output of a convolutional layer pre- and post-activation
        conv_x = self.conv(x)
        activated_x = fn.relu(conv_x)
        # Returns both layers
        return conv_x, activated_x

    # Instantiate the model and set the weights


weight = torch.from_numpy(filtered_image).unsqueeze(1).type(torch.FloatTensor)
model = Net(weight)
# Print out the layer in the network
print(model)


def visualization_layer(layer, n_filters=4):
    fig = plt.figure(figsize=(20, 20))
    for i in range(n_filters):
        ax = fig.add_subplot(1, n_filters, i + 1, xticks=[], yticks=[])
        # Grab layer outputs
        ax.imshow(np.squeeze(layer[0, i].data.numpy()), cmap='gray')
        ax.set_title('Output %s' % str(i + 1))


# display the grayscale
print(plt.imshow(gray, cmap='gray'))
plt.show()
# Visualize all of the filters
fig = plt.figure(figsize=(12, 6))
fig.subplots_adjust(left=0, right=1.5, bottom=0.8, top=1, hspace=0.05, wspace=0.05)
gray_img_tensor = torch.from_numpy(gray).unsqueeze(0).unsqueeze(1)
print("Grayscale_type: ",type(gray_img_tensor))

# Get the convolutional layer (pre and post activation)
conv_layer, activated_layer = model.forward(gray_img_tensor.float())
# Visualize the output of a convolutional layer
visualization_layer(conv_layer)
